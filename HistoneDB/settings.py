"""
Django settings for HistoneDB project.

Generated by 'django-admin startproject' using Django 1.8.1.

For more information on this file, see
https://docs.djangoproject.com/en/1.8/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.8/ref/settings/
"""

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import os
import dj_database_url
from settings_overrider import override

GUNICORN = True if (os.getenv('GUNICORN', "0") == "1") else False
if (GUNICORN):
    print("GUNICORN setup enabled")
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.8/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("DJANGO_SECRET_KEY", "=xqnj28v!%p6-7)_0cxyycb(jt#id$8voeb5dn81us=oprk2o8")
SESSION_COOKIE_HTTPONLY = True

USE_X_FORWARDED_HOST = True
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

COMPRESS_OFFLINE = True
COMPRESS_CSS_FILTERS = [
    'compressor.filters.cssmin.rCSSMinFilter',
    'compressor.filters.css_default.CssRelativeFilter'
]

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get("NCBI_database_info_DEBUG", "True") == "True"
# DEBUG = True
if not DEBUG:
    # X_FRAME_OPTIONS = "DENY"
    # CSRF_COOKIE_HTTPONLY = True
    # CSRF_COOKIE_SECURE = True
    SESSION_COOKIE_SECURE = True
    # SECURE_SSL_REDIRECT = True
    SECURE_BROWSER_XSS_FILTER = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    # SECURE_HSTS_SECONDS = 0

ALLOWED_HOSTS = ['*']

# Application definition

INSTALLED_APPS = (
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'compressor',
    'browse',
    'djangophylocore',
    'django_extensions',
    # 'mod_wsgi.server',
    # 'analytics'
)

MIDDLEWARE = (
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.locale.LocaleMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.common.BrokenLinkEmailsMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
)

ROOT_URLCONF = 'HistoneDB.urls'
WSGI_APPLICATION = 'HistoneDB.wsgi.application'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, "templates"), ],
        'OPTIONS': {
            "loaders": [
                "django.template.loaders.filesystem.Loader",
                "django.template.loaders.app_directories.Loader",
            ],
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, "templates"), ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages'
            ]
        }
    }
]

# Database
DATABASES = {}

# Parse database configuration from $DATABASE_URL if available
# if (dj_database_url.config()):
#     DATABASES['default'] = dj_database_url.config()  # this is for cloud setup
# Internationalization
# https://docs.djangoproject.com/en/1.8/topics/i18n/

ADMIN_URL = "admin/"
LANGUAGE_CODE = 'en-us'
CSRF_COOKIE_NAME = 'histonedb-csrftoken'
TIME_ZONE = 'America/New_York'
USE_I18N = True
USE_L10N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.8/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join('var', 'data', 'static')
STATICFILES_FINDERS = (
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
    'compressor.finders.CompressorFinder'
)

NCBI_APP = 'HISTONEDB'
APPLOG_APPNAME = 'histonedb'

MEDIA_ROOT = str( "/tmp/")

if (not GUNICORN):
    STATICFILES_DIRS = [
        os.path.join(BASE_DIR, "static"),
    ]

# Simplified static file serving.
# https://warehouse.python.org/project/whitenoise/
if (GUNICORN):
    STATICFILES_STORAGE = 'whitenoise.django.GzipManifestStaticFilesStorage'
    STATIC_ROOT = os.path.join(BASE_DIR, "static")

yaml_var = 'DJANGO_SETTINGS_YAML'
yaml_path = os.getenv(yaml_var, os.path.join('etc', 'settings.yaml'))

# You can use prefixed env variables, e.g. DJANGO_DEBUG env variable becomes DEBUG setting
var_prefix = 'DJANGO_'

if os.path.exists(yaml_path):
    override(globals(), yaml=yaml_path)

override(globals(), env=var_prefix)
